// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/menggggggg/go-web-template/internal/app/model"
)

func newOjLanguage(db *gorm.DB, opts ...gen.DOOption) ojLanguage {
	_ojLanguage := ojLanguage{}

	_ojLanguage.ojLanguageDo.UseDB(db, opts...)
	_ojLanguage.ojLanguageDo.UseModel(&model.OjLanguage{})

	tableName := _ojLanguage.ojLanguageDo.TableName()
	_ojLanguage.ALL = field.NewAsterisk(tableName)
	_ojLanguage.ID = field.NewInt64(tableName, "id")
	_ojLanguage.Name = field.NewString(tableName, "name")
	_ojLanguage.CompileStatement = field.NewString(tableName, "compile_statement")
	_ojLanguage.CreateTime = field.NewTime(tableName, "create_time")
	_ojLanguage.UpdateTime = field.NewTime(tableName, "update_time")

	_ojLanguage.fillFieldMap()

	return _ojLanguage
}

type ojLanguage struct {
	ojLanguageDo

	ALL              field.Asterisk
	ID               field.Int64
	Name             field.String // 语言名称
	CompileStatement field.String // 编译语句
	CreateTime       field.Time
	UpdateTime       field.Time

	fieldMap map[string]field.Expr
}

func (o ojLanguage) Table(newTableName string) *ojLanguage {
	o.ojLanguageDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o ojLanguage) As(alias string) *ojLanguage {
	o.ojLanguageDo.DO = *(o.ojLanguageDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *ojLanguage) updateTableName(table string) *ojLanguage {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.Name = field.NewString(table, "name")
	o.CompileStatement = field.NewString(table, "compile_statement")
	o.CreateTime = field.NewTime(table, "create_time")
	o.UpdateTime = field.NewTime(table, "update_time")

	o.fillFieldMap()

	return o
}

func (o *ojLanguage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *ojLanguage) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["id"] = o.ID
	o.fieldMap["name"] = o.Name
	o.fieldMap["compile_statement"] = o.CompileStatement
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["update_time"] = o.UpdateTime
}

func (o ojLanguage) clone(db *gorm.DB) ojLanguage {
	o.ojLanguageDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o ojLanguage) replaceDB(db *gorm.DB) ojLanguage {
	o.ojLanguageDo.ReplaceDB(db)
	return o
}

type ojLanguageDo struct{ gen.DO }

type IOjLanguageDo interface {
	gen.SubQuery
	Debug() IOjLanguageDo
	WithContext(ctx context.Context) IOjLanguageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOjLanguageDo
	WriteDB() IOjLanguageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOjLanguageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOjLanguageDo
	Not(conds ...gen.Condition) IOjLanguageDo
	Or(conds ...gen.Condition) IOjLanguageDo
	Select(conds ...field.Expr) IOjLanguageDo
	Where(conds ...gen.Condition) IOjLanguageDo
	Order(conds ...field.Expr) IOjLanguageDo
	Distinct(cols ...field.Expr) IOjLanguageDo
	Omit(cols ...field.Expr) IOjLanguageDo
	Join(table schema.Tabler, on ...field.Expr) IOjLanguageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOjLanguageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOjLanguageDo
	Group(cols ...field.Expr) IOjLanguageDo
	Having(conds ...gen.Condition) IOjLanguageDo
	Limit(limit int) IOjLanguageDo
	Offset(offset int) IOjLanguageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOjLanguageDo
	Unscoped() IOjLanguageDo
	Create(values ...*model.OjLanguage) error
	CreateInBatches(values []*model.OjLanguage, batchSize int) error
	Save(values ...*model.OjLanguage) error
	First() (*model.OjLanguage, error)
	Take() (*model.OjLanguage, error)
	Last() (*model.OjLanguage, error)
	Find() ([]*model.OjLanguage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OjLanguage, err error)
	FindInBatches(result *[]*model.OjLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OjLanguage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOjLanguageDo
	Assign(attrs ...field.AssignExpr) IOjLanguageDo
	Joins(fields ...field.RelationField) IOjLanguageDo
	Preload(fields ...field.RelationField) IOjLanguageDo
	FirstOrInit() (*model.OjLanguage, error)
	FirstOrCreate() (*model.OjLanguage, error)
	FindByPage(offset int, limit int) (result []*model.OjLanguage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOjLanguageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o ojLanguageDo) Debug() IOjLanguageDo {
	return o.withDO(o.DO.Debug())
}

func (o ojLanguageDo) WithContext(ctx context.Context) IOjLanguageDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o ojLanguageDo) ReadDB() IOjLanguageDo {
	return o.Clauses(dbresolver.Read)
}

func (o ojLanguageDo) WriteDB() IOjLanguageDo {
	return o.Clauses(dbresolver.Write)
}

func (o ojLanguageDo) Session(config *gorm.Session) IOjLanguageDo {
	return o.withDO(o.DO.Session(config))
}

func (o ojLanguageDo) Clauses(conds ...clause.Expression) IOjLanguageDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o ojLanguageDo) Returning(value interface{}, columns ...string) IOjLanguageDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o ojLanguageDo) Not(conds ...gen.Condition) IOjLanguageDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o ojLanguageDo) Or(conds ...gen.Condition) IOjLanguageDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o ojLanguageDo) Select(conds ...field.Expr) IOjLanguageDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o ojLanguageDo) Where(conds ...gen.Condition) IOjLanguageDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o ojLanguageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOjLanguageDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o ojLanguageDo) Order(conds ...field.Expr) IOjLanguageDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o ojLanguageDo) Distinct(cols ...field.Expr) IOjLanguageDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o ojLanguageDo) Omit(cols ...field.Expr) IOjLanguageDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o ojLanguageDo) Join(table schema.Tabler, on ...field.Expr) IOjLanguageDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o ojLanguageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOjLanguageDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o ojLanguageDo) RightJoin(table schema.Tabler, on ...field.Expr) IOjLanguageDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o ojLanguageDo) Group(cols ...field.Expr) IOjLanguageDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o ojLanguageDo) Having(conds ...gen.Condition) IOjLanguageDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o ojLanguageDo) Limit(limit int) IOjLanguageDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o ojLanguageDo) Offset(offset int) IOjLanguageDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o ojLanguageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOjLanguageDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o ojLanguageDo) Unscoped() IOjLanguageDo {
	return o.withDO(o.DO.Unscoped())
}

func (o ojLanguageDo) Create(values ...*model.OjLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o ojLanguageDo) CreateInBatches(values []*model.OjLanguage, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o ojLanguageDo) Save(values ...*model.OjLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o ojLanguageDo) First() (*model.OjLanguage, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OjLanguage), nil
	}
}

func (o ojLanguageDo) Take() (*model.OjLanguage, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OjLanguage), nil
	}
}

func (o ojLanguageDo) Last() (*model.OjLanguage, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OjLanguage), nil
	}
}

func (o ojLanguageDo) Find() ([]*model.OjLanguage, error) {
	result, err := o.DO.Find()
	return result.([]*model.OjLanguage), err
}

func (o ojLanguageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OjLanguage, err error) {
	buf := make([]*model.OjLanguage, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o ojLanguageDo) FindInBatches(result *[]*model.OjLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o ojLanguageDo) Attrs(attrs ...field.AssignExpr) IOjLanguageDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o ojLanguageDo) Assign(attrs ...field.AssignExpr) IOjLanguageDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o ojLanguageDo) Joins(fields ...field.RelationField) IOjLanguageDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o ojLanguageDo) Preload(fields ...field.RelationField) IOjLanguageDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o ojLanguageDo) FirstOrInit() (*model.OjLanguage, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OjLanguage), nil
	}
}

func (o ojLanguageDo) FirstOrCreate() (*model.OjLanguage, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OjLanguage), nil
	}
}

func (o ojLanguageDo) FindByPage(offset int, limit int) (result []*model.OjLanguage, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o ojLanguageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o ojLanguageDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o ojLanguageDo) Delete(models ...*model.OjLanguage) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *ojLanguageDo) withDO(do gen.Dao) *ojLanguageDo {
	o.DO = *do.(*gen.DO)
	return o
}
